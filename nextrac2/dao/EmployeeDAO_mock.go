// Code generated by MockGen. DO NOT EDIT.
// Source: nexsoft.co.id/nextrac2/dao (interfaces: EmployeeDAOInterface)

// Package dao is a generated GoMock package.
package dao

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	in "nexsoft.co.id/nextrac2/dto/in"
	applicationModel "nexsoft.co.id/nextrac2/model/applicationModel"
	errorModel "nexsoft.co.id/nextrac2/model/errorModel"
	repository "nexsoft.co.id/nextrac2/repository"
)

// MockEmployeeDAOInterface is a mock of EmployeeDAOInterface interface.
type MockEmployeeDAOInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeDAOInterfaceMockRecorder
}

// MockEmployeeDAOInterfaceMockRecorder is the mock recorder for MockEmployeeDAOInterface.
type MockEmployeeDAOInterfaceMockRecorder struct {
	mock *MockEmployeeDAOInterface
}

// NewMockEmployeeDAOInterface creates a new mock instance.
func NewMockEmployeeDAOInterface(ctrl *gomock.Controller) *MockEmployeeDAOInterface {
	mock := &MockEmployeeDAOInterface{ctrl: ctrl}
	mock.recorder = &MockEmployeeDAOInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeDAOInterface) EXPECT() *MockEmployeeDAOInterfaceMockRecorder {
	return m.recorder
}

// DeleteEmployee mocks base method.
func (m *MockEmployeeDAOInterface) DeleteEmployee(arg0 *sql.Tx, arg1 repository.EmployeeModel) errorModel.ErrorModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", arg0, arg1)
	ret0, _ := ret[0].(errorModel.ErrorModel)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockEmployeeDAOInterfaceMockRecorder) DeleteEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockEmployeeDAOInterface)(nil).DeleteEmployee), arg0, arg1)
}

// GetCountEmployee mocks base method.
func (m *MockEmployeeDAOInterface) GetCountEmployee(arg0 *sql.DB, arg1 []in.SearchByParam, arg2 int64, arg3 map[string]interface{}, arg4 map[string]applicationModel.MappingScopeDB) (int, errorModel.ErrorModel) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountEmployee", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(errorModel.ErrorModel)
	return ret0, ret1
}

// GetCountEmployee indicates an expected call of GetCountEmployee.
func (mr *MockEmployeeDAOInterfaceMockRecorder) GetCountEmployee(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountEmployee", reflect.TypeOf((*MockEmployeeDAOInterface)(nil).GetCountEmployee), arg0, arg1, arg2, arg3, arg4)
}

// GetEmployeeForUpdate mocks base method.
func (m *MockEmployeeDAOInterface) GetEmployeeForUpdate(arg0 *sql.DB, arg1 repository.EmployeeModel) (repository.EmployeeModel, errorModel.ErrorModel) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeForUpdate", arg0, arg1)
	ret0, _ := ret[0].(repository.EmployeeModel)
	ret1, _ := ret[1].(errorModel.ErrorModel)
	return ret0, ret1
}

// GetEmployeeForUpdate indicates an expected call of GetEmployeeForUpdate.
func (mr *MockEmployeeDAOInterfaceMockRecorder) GetEmployeeForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeForUpdate", reflect.TypeOf((*MockEmployeeDAOInterface)(nil).GetEmployeeForUpdate), arg0, arg1)
}

// GetListEmployee mocks base method.
func (m *MockEmployeeDAOInterface) GetListEmployee(arg0 *sql.DB, arg1 in.GetListDataDTO, arg2 []in.SearchByParam, arg3 int64, arg4 map[string]interface{}, arg5 map[string]applicationModel.MappingScopeDB) ([]interface{}, errorModel.ErrorModel) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListEmployee", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(errorModel.ErrorModel)
	return ret0, ret1
}

// GetListEmployee indicates an expected call of GetListEmployee.
func (mr *MockEmployeeDAOInterfaceMockRecorder) GetListEmployee(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListEmployee", reflect.TypeOf((*MockEmployeeDAOInterface)(nil).GetListEmployee), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InsertEmployee mocks base method.
func (m *MockEmployeeDAOInterface) InsertEmployee(arg0 *sql.Tx, arg1 repository.EmployeeModel) (int64, errorModel.ErrorModel) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEmployee", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errorModel.ErrorModel)
	return ret0, ret1
}

// InsertEmployee indicates an expected call of InsertEmployee.
func (mr *MockEmployeeDAOInterfaceMockRecorder) InsertEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEmployee", reflect.TypeOf((*MockEmployeeDAOInterface)(nil).InsertEmployee), arg0, arg1)
}

// UpdateEmployee mocks base method.
func (m *MockEmployeeDAOInterface) UpdateEmployee(arg0 *sql.Tx, arg1 repository.EmployeeModel) errorModel.ErrorModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", arg0, arg1)
	ret0, _ := ret[0].(errorModel.ErrorModel)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockEmployeeDAOInterfaceMockRecorder) UpdateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockEmployeeDAOInterface)(nil).UpdateEmployee), arg0, arg1)
}

// ViewEmployee mocks base method.
func (m *MockEmployeeDAOInterface) ViewEmployee(arg0 *sql.DB, arg1 repository.EmployeeModel) (repository.EmployeeModel, errorModel.ErrorModel) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewEmployee", arg0, arg1)
	ret0, _ := ret[0].(repository.EmployeeModel)
	ret1, _ := ret[1].(errorModel.ErrorModel)
	return ret0, ret1
}

// ViewEmployee indicates an expected call of ViewEmployee.
func (mr *MockEmployeeDAOInterfaceMockRecorder) ViewEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewEmployee", reflect.TypeOf((*MockEmployeeDAOInterface)(nil).ViewEmployee), arg0, arg1)
}
