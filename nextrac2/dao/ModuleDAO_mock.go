// Code generated by MockGen. DO NOT EDIT.
// Source: nexsoft.co.id/nextrac2/dao (interfaces: ModuleDAOInterface)

// Package dao is a generated GoMock package.
package dao

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	errorModel "nexsoft.co.id/nextrac2/model/errorModel"
	repository "nexsoft.co.id/nextrac2/repository"
)

// MockModuleDAOInterface is a mock of ModuleDAOInterface interface.
type MockModuleDAOInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModuleDAOInterfaceMockRecorder
}

// MockModuleDAOInterfaceMockRecorder is the mock recorder for MockModuleDAOInterface.
type MockModuleDAOInterfaceMockRecorder struct {
	mock *MockModuleDAOInterface
}

// NewMockModuleDAOInterface creates a new mock instance.
func NewMockModuleDAOInterface(ctrl *gomock.Controller) *MockModuleDAOInterface {
	mock := &MockModuleDAOInterface{ctrl: ctrl}
	mock.recorder = &MockModuleDAOInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleDAOInterface) EXPECT() *MockModuleDAOInterfaceMockRecorder {
	return m.recorder
}

// GetModuleForUpdate mocks base method.
func (m *MockModuleDAOInterface) GetModuleForUpdate(arg0 *sql.Tx, arg1 repository.ModuleModel) (repository.ModuleModel, errorModel.ErrorModel) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleForUpdate", arg0, arg1)
	ret0, _ := ret[0].(repository.ModuleModel)
	ret1, _ := ret[1].(errorModel.ErrorModel)
	return ret0, ret1
}

// GetModuleForUpdate indicates an expected call of GetModuleForUpdate.
func (mr *MockModuleDAOInterfaceMockRecorder) GetModuleForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleForUpdate", reflect.TypeOf((*MockModuleDAOInterface)(nil).GetModuleForUpdate), arg0, arg1)
}
